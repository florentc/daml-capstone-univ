module Templates where

import qualified DA.Text as Text
import DA.Foldable (forA_)
import DA.Optional (catOptionals)
import DA.List ((\\))

newtype CoverLetter = CoverLetter Text deriving (Eq, Show)

-- Whether a cover letter fits the size constraints
validCoverLetter: CoverLetter -> Bool
validCoverLetter (CoverLetter str) =
    10 <= Text.length str && Text.length str <= 1000

-- Evaluators give a feedback that can be mapped to an integer score
class ToScore a where
    toScore: a -> Int

-- A datatype for reviews from evaluators
data Evaluation = StrongAccept | Accept | Reject | StrongReject deriving (Eq, Show)

-- Integer scores in the -5 to +5 range are associated to each possible review
instance ToScore Evaluation where
    toScore StrongAccept = 5
    toScore Accept = 2
    toScore Reject = -2
    toScore StrongReject = -5

-- An integer score in restricted to the -5 to +5 range
instance ToScore Int where
    toScore = min 5 . max (-5)

-- Whether a score fits the allowed range
isValidScore: Int -> Bool
isValidScore n = -5 <= n && n <= 5

-- An application to a university
data Application = Application
    with
        university: Party
        student: Party
        coverLetter: CoverLetter
    deriving (Eq, Show)

-- The key associated to an application is the pair university/student.
-- We don't want several applications with different cover letters.
-- We use that key in most contracts dealing with an application.
data ApplicationKey = ApplicationKey
    with
        university: Party
        student: Party

appKey: Application -> ApplicationKey
appKey Application{..} = ApplicationKey with university, student

-- A request to apply to a university
template ApplicationRequest
    with
        app: Application
    where
        signatory app.student
        observer app.university
        ensure validCoverLetter app.coverLetter

        -- Process the request and create an actual application if the student is not already given an offer or under a previous rejection
        choice ProcessRequest: Optional (ContractId ApplicationPending)
            with
                teachers: [Party]
                minReviews: Int
            controller app.university
            do
                assertMsg "Not enough reviewers" (length teachers >= minReviews)
                enrolled <- visibleByKey @Offer (appKey app)
                rejected <- visibleByKey @Rejection (appKey app)
                if enrolled || rejected then
                    return None
                else
                    do
                        -- Asks every teacher for a review of the application
                        forA_ teachers (\teacher -> create ReviewRequest with app, teacher) 
                        -- Creates an ApplicationPending contract
                        Some <$>
                            create ApplicationPending with
                                app
                                teachers
                                reviewsLeft = minReviews -- At least 2 reviews are expected
                                score = 0 -- Initially, the review score is 0


-- A rejection from a university
template Rejection
    with
        app: Application
    where
        signatory app.university
        observer app.student
        key appKey app: ApplicationKey
        maintainer key.university

-- An offer to enroll to a university
template Offer
    with
        app: Application
    where
        signatory app.university
        observer app.student
        key appKey app: ApplicationKey
        maintainer key.university

-- A review from a teacher
template Review
    with
        app: Application
        teacher: Party
        score: Int
    where
        signatory teacher
        observer app.university, app.student
        key (appKey app, teacher): (ApplicationKey, Party)
        maintainer key._2
        ensure isValidScore score

        -- The student can consult the review
        nonconsuming choice Consult: Int
            controller app.student
            do
                return score
        
        -- The university fetches the review score
        choice FetchScore: Int
            controller app.university
            do
                return score


-- A review request
template ReviewRequest
    with
        app: Application
        teacher: Party
    where
        signatory app.university
        observer app.student, teacher
        key (appKey app, teacher): (ApplicationKey, Party)
        maintainer key._1.university
        ensure validCoverLetter app.coverLetter

        -- The teacher reviews with an accept/reject evaluation
        choice Evaluate: ContractId Review
            with
                evaluation: Evaluation
            controller teacher
            do
                create Review with
                    app
                    teacher
                    score = toScore evaluation
        
        -- The teacher reviews with a fine tuned score
        choice Score: ContractId Review
            with
                score: Int
            controller teacher
            do
                assertMsg "Score is expected to be in the -5 to 5 range" (isValidScore score)
                create Review with
                    app
                    teacher
                    score = toScore score
        
        -- The university cancels the review request when it is no longer needed
        choice Cancel: ()
            controller app.university
            do
                return ()


-- An application in progress
data GatherReviewsResult =
      ReviewsPending (ContractId ApplicationPending)
    | ReviewsOffer (ContractId Offer)
    | ReviewsReject (ContractId Rejection)

template ApplicationPending
    with
        app: Application
        teachers: [Party] -- Reviewers left to answer
        reviewsLeft: Int -- How many reviews left before it is possible to decide
        score: Int -- The current score
    
    where
        signatory app.university
        key appKey app: ApplicationKey
        maintainer key.university
        ensure validCoverLetter app.coverLetter

        choice GatherReviews: GatherReviewsResult
            controller app.university
            do
                -- Fetch the new available reviews
                newReviews <- catOptionals <$>
                    forA teachers (\teacher -> do
                        hasReviewed <- visibleByKey @Review (appKey app, teacher)
                        if hasReviewed then
                            Some . (teacher,) <$> exerciseByKey @Review (appKey app, teacher) FetchScore
                        else
                            return None    
                    )
                
                -- Compute the new state
                let reviewsLeft' = reviewsLeft - length newReviews
                let teachers' = teachers \\ (fst <$> newReviews)
                let score' = score + sum (snd <$> newReviews)

                -- If the decision can be taken
                if reviewsLeft' <= 0 then do
                    -- Cancel the remaining requests for reviews
                    forA_ teachers' (\teacher ->
                        exerciseByKey @ReviewRequest (appKey app, teacher) Cancel)
                    -- Create an offer or rejection
                    if score > 0 then
                        ReviewsOffer <$> create Offer with app
                    else
                        ReviewsReject <$> create Rejection with app
                -- If reviews still have to be gathered, update the state in a new ApplicationPending contract
                else
                    ReviewsPending <$> create this with
                        reviewsLeft = reviewsLeft'
                        score = score'
                        teachers = teachers'